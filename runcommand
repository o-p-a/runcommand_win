#! /usr/bin/ruby -E:UTF-8
# -*- mode:Ruby; tab-width:4; coding:UTF-8; -*-
# vi:set ft=ruby ts=4 fenc=UTF-8 :
#----------------------------------------------------------------
# runcommand
#
# 2020/09/18 opa
#----------------------------------------------------------------

ProgName = "runcommand"
Version = "0.02"
#=====dpk===== Copyright2020
Copyright = "Copyright (c) 2020 by opa"
#=====dpk=====

require 'pathname'

RETROARCH_HOME = "c:/tools/retroarch"
PIECONFIG_HOME = File.expand_path("~/RetroPie-Config")
CONFIG_DIR = File.join(PIECONFIG_HOME, "configs")

#=====dpk===== os_is_windows?
# Windows環境下かどうか判定する
module Kernel
 module_function
	if RUBY_PLATFORM =~ /mswin(?!ce)|mingw|cygwin|bccwin|emx/i
		def os_is_windows?; true; end
	else
		def os_is_windows?; false; end
	end
end
#=====dpk=====

# Win32(WIDE)との橋渡し用
module Win32
	WIDE = Encoding::UTF_16LE
	WIDE_NUL = "\0".encode(WIDE).freeze
	WIDE_SIZE = WIDE_NUL.bytesize
	def self.wstr(size); WIDE_NUL * size; end
	def self.to_wstr!(s); s ? s.encode!(WIDE).concat(WIDE_NUL) : nil; end
	def self.to_wstr(s); s ? s.encode(WIDE).concat(WIDE_NUL) : nil; end
	def self.from_wstr(s)
		if s.respond_to?(:encode)
			s = s.dup.force_encoding(WIDE)  if s.encoding != WIDE
			return (i = s.index(WIDE_NUL)) ? s[0,i].encode! : s.encode
		else
			s = DL::CPtr.new(s)  if s.is_a?(Integer)
			return nil  if s.null?
			i = 0; i += 2  until s[i] == 0 && s[i+1] == 0
			return s.to_s(i).force_encoding(WIDE).encode!
		end
	end
end

# Ruby 2.0以降はFiddleを使う、Win32APIのようなもの
if os_is_windows?
	if RUBY_VERSION >= "2"
		require 'fiddle/import'
		class Win32::API
			DLL = {}
			if Fiddle::SIZEOF_VOIDP == Fiddle::SIZEOF_LONG_LONG
				POINTER_TYPE = 'q*'
				CALLTYPEMAP = {cdecl: Fiddle::Function::DEFAULT, stdcall: Fiddle::Function::DEFAULT}
			else
				POINTER_TYPE = 'l!*'
				CALLTYPEMAP = {cdecl: Fiddle::Function::DEFAULT, stdcall: Fiddle::Function::STDCALL}
			end

			def typemap(t)
				case t
				 when /[PH]/i;	Fiddle::TYPE_VOIDP
				 when /[NLI]/i;	Fiddle::TYPE_LONG
				 when /[Q]/i;	Fiddle::TYPE_LONG_LONG
				 else			Fiddle::TYPE_VOID
				end
			end
			private :typemap

			def initialize(dllname, func, import, export = nil, calltype = :stdcall)
				@proto = [import].join.each_char.map { |v| typemap(v) }
				handle = DLL[dllname] ||= Fiddle.dlopen(dllname)
				@func = Fiddle::Function.new(handle[func], @proto, typemap(export),
						Fiddle::Importer.const_get(:CALL_TYPE_TO_ABI)[calltype])
			 rescue Fiddle::DLError => e
				raise LoadError, e.message, e.backtrace
			end

			def call(*args)
				args.each_with_index do |x, i|
					case @proto[i]
					 when Fiddle::TYPE_VOIDP
						if x.nil? || x.is_a?(String)
							args[i], = [x].pack("p").unpack(POINTER_TYPE)
						else
							args[i], = [x].pack("Q").unpack("q")
						end
					 when Fiddle::TYPE_LONG
						args[i], = [x].pack("I").unpack("i")
					 when Fiddle::TYPE_LONG_LONG
						args[i], = [x].pack("Q").unpack("q")
					end
				end
				ret, = @func.call(*args)
				return ret || 0
			end
		end
	else
		require 'win32api'
		class Win32::API < Win32API; end
	end
else
	class Win32::API; end
end

class Win32::API
	# def self.GetCommandLine
	# 	@@GetCommandLineW ||= new("kernel32", "GetCommandLineW", nil, "p")
	# 	Win32::from_wstr(@@GetCommandLineW.call)
	# end

	# def self.GetLastError
	# 	@@GetLastError ||= new("kernel32", "GetLastError", "", "i")
	# 	return @@GetLastError.call
	# end

	# WAIT_TIMEOUT = 0x102
	# def self.WaitForSingleObject(handle, milliseconds = -1)
	# 	@@WaitForSingleObject ||= new("kernel32", "WaitForSingleObject", "hi", "i")
	# 	return @@WaitForSingleObject.call(handle, milliseconds)
	# end

	def self.CreateProcess(cmdline)
		@@CreateProcess ||= new("kernel32", "CreateProcessW", "ppppiipppp", "i")
		# STARTUPINFO
	 	si = [0, nil, nil ,nil, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, nil, 0, 0, 0]
		si[0] = si.pack("Lp3L8S2PL3").bytesize
		si = si.pack("Lp3L8S2PL3")
		# PROCESS_INFORMATION
		pi = [0, 0, 0, 0].pack("QQLL")
		r = @@CreateProcess.call(nil, Win32::to_wstr(cmdline), nil, nil, 0, 0, nil, nil, si, pi)
		fail  if r == 0
		pi = pi.unpack("QQLL")
		return { hProcess:pi[0], hThread:pi[1], dwProcessId:pi[2], dwThreadId:pi[3] }
	end

	def self.CloseHandle(object)
		@@CloseHandle ||= new("kernel32", "CloseHandle", "h", "i")
		r = @@CloseHandle.call(object)
		fail  if r == 0
	end

	TH32CS_SNAPPROCESS = 0x2
	INVALID_HANDLE_VALUE = -1
	def self.CreateToolhelp32Snapshot(flags, pid = 0)
		@@CreateToolhelp32Snapshot ||= new("kernel32", "CreateToolhelp32Snapshot", "ii", "h")
		return @@CreateToolhelp32Snapshot.call(flags, pid)
	end

	MAX_PATH = 260
	def self.Process32Next(handle)
		@@Process32Next ||= new("kernel32", "Process32NextW", "hp", "i")
		# PROCESSENTRY32
		pe = [0, 0, 0, 0, nil, 0, 0, 0, 0, 0, Win32::wstr(MAX_PATH+2)]
		pe[0] = pe.pack("LLLLP4LLLLLa*").bytesize
		pe = pe.pack("LLLLP4LLLLLa*")
		r = @@Process32Next.call(handle, pe)
		if r != 0
			pe = pe.unpack("LLLLP4LLLLLa*")
			return {
				usage: pe[1],
				pid: pe[2],
				hid: pe[4],
				mid: pe[5],
				threads: pe[6],
				ppid: pe[7],
				priclassbase: pe[8],
				flags: pe[9],
				exefile: Win32::from_wstr(pe[10]),
			}
		else
			return nil
		end
	end
end

def system_wait_descendant(cmdline)
	# system(cmdline)

	pi = Win32::API::CreateProcess(cmdline)
	Win32::API::CloseHandle(pi[:hThread])

	descendants = {}
	descendants[pi[:dwProcessId]] = { pid:pi[:dwProcessId], live:true }

	while !descendants.empty?
		descendants.each { |pid, desc| desc[:live] = nil }

		snapshot = Win32::API::CreateToolhelp32Snapshot(Win32::API::TH32CS_SNAPPROCESS)
		while (pe = Win32::API::Process32Next(snapshot))
			sn_pid = pe[:pid]
			sn_ppid = pe[:ppid]

			if descendants.has_key?(sn_pid)
				descendants[sn_pid][:live] = true
			end

			if descendants.has_key?(sn_ppid)
				descendants[sn_pid] = { pid:sn_pid, live:true }
			end
		end
		Win32::API::CloseHandle(snapshot)

		descendants.delete_if { |pid, desc| !desc[:live] }

		sleep(0.555)
	end

	Win32::API::CloseHandle(pi[:hProcess])
end

def make_system_config_file(system_name)

	savedir = File.join($system_config_dir, "saves")
	if !File.exist?(savedir)
		Dir.mkdir(savedir)
	end
	statedir = File.join($system_config_dir, "states")
	if !File.exist?(statedir)
		Dir.mkdir(statedir)
	end

	File.open($system_config_filename, "wb:UTF-8") do |ofile|
		ofile.puts("# Auto generated by runcommand.exe")
		ofile.puts("")

		ofile.puts(%[input_remapping_directory = "#{$system_config_dir}"])
		# ofile.puts(%[keyboard_gamepad_enable = "true"])
		ofile.puts(%[rgui_config_directory = "#{$system_config_dir}"])
		ofile.puts(%[savefile_directory = "#{savedir}"])
		ofile.puts(%[savestate_directory = "#{statedir}"])

		ofile.puts("")
		# ofile.puts("#include \":/config/all/retroarch.cfg\"")
		base_cfg_rel = Pathname($base_config_filename).relative_path_from(Pathname($system_config_dir))
		ofile.puts(%[#include "#{base_cfg_rel}"])
	end
end

def run_retroarch(system_name, core_basename, rom_filename, use_keyboard:false)
	$exe_filename = File.join(RETROARCH_HOME, "retroarch.exe")
	$core_filename = File.join(RETROARCH_HOME, "cores", core_basename + "_libretro.dll")
	$base_config_dir = File.join(CONFIG_DIR, "all")
	$base_config_filename = File.join($base_config_dir, "retroarch.cfg")
	$kbd_config_filename = File.join($base_config_dir, "retroarch_kbd.cfg")
	$system_config_dir = File.join(CONFIG_DIR, system_name)
	$system_config_filename = File.join($system_config_dir, "retroarch.cfg")
	$rom_filename = rom_filename

	make_system_config_file(system_name)

	cmd = [$exe_filename]
	cmd += ["--libretro", $core_filename]
	# cmd += ["--config", $base_config_filename]
	# cmd += ["--appendconfig", $system_config_filename]
	cmd += ["--config", $system_config_filename]
	cmd += [$rom_filename]

	cmd = cmd.map{ |t| t =~ /\s/ ? "\"#{t}\"" : t }.join(" ")
	$log.printf("exec : %s\n", cmd)
	system_wait_descendant(cmd)
end

def main(args)
	$log = File.open($0 + ".log", "wt:UTF-8")
	$log.print("runcommand start\n");

	if args.size < 4
		$log.print("Missing arguments\n")
		fail "Missing arguments"
	end

	# video_mode = args[0]
	# $log.print("video_mode = #{video_mode}\n")
	# sys_port = args[1]
	# $log.print("sys_port = #{sys_port}\n")
	system = args[2]
	$log.print("system = #{system}\n")
	rom = args[3]
	$log.print("rom = #{rom}\n")

	case system
	when "arcade"
		run_retroarch(system, "mame2010", rom)
	when "coleco"
		run_retroarch(system, "bluemsx", rom)
	when "dreamcast"
		run_retroarch(system, "flycast", rom)
	when "fds"
		run_retroarch(system, "nestopia", rom)
	when "gameandwatch"
		run_retroarch(system, "gw", rom)
	when "gamegear"
		run_retroarch(system, "genesis_plus_gx", rom)
	when "gb"
		run_retroarch(system, "mgba", rom)
	when "gba"
		run_retroarch(system, "mgba", rom)
	when "gbc"
		run_retroarch(system, "mgba", rom)
	when "mame-libretro"
		run_retroarch(system, "mame2010", rom)
	when "mastersystem"
		run_retroarch(system, "genesis_plus_gx", rom)
	when "megadrive"
		run_retroarch(system, "genesis_plus_gx", rom)
	when "msx"
		run_retroarch(system, "bluemsx", rom)
	when "n64"
		run_retroarch(system, "mupen64plus_next", rom)
	when "nds"
		run_retroarch(system, "desmume", rom)
	when "nes"
		run_retroarch(system, "nestopia", rom)
	when "pc98"
		run_retroarch(system, "np2kai", rom)
	when "pcengine"
		run_retroarch(system, "mednafen_pce_fast", rom)
	when "psp"
		run_retroarch(system, "ppsspp", rom)
	when "psx"
		run_retroarch(system, "pcsx_rearmed", rom)
	when "saturn"
		run_retroarch(system, "yabause", rom)
	when "segacd"
		run_retroarch(system, "genesis_plus_gx", rom)
	when "sg-1000"
		run_retroarch(system, "genesis_plus_gx", rom)
	when "snes"
		run_retroarch(system, "snes9x2010", rom)
	when "vectrex"
		run_retroarch(system, "vecx", rom)
	when "x68000"
		run_retroarch(system, "px68k", rom)
	else
		$log.print("Unknown system\n")
		fail "Unknown system"
	end

	$log.print("runcommand end\n");
	$log.close

	return 0
end

exit main(ARGV)
